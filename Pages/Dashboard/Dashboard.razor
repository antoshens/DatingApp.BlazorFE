@page "/Dashboard"

@using DatingApp.FrontEnd.Gateway.DotNetGateway;
@using System.Text;

@attribute [Authorize]

@inject GatewayAdapter gtwAdapter;
@inject IJSRuntime _jsRuntime;

<div class="member-cards-gallery">
    @*Spinner*@
    @if (showMainSpinner)
    {
        <div class="spinner-div">
            <BSSpinner id="spinner" Class="spinner" Color="BSColor.Warning" Size="Size.ExtraLarge" />
        </div>
    }

    @foreach (var member in Members)
    {
        var mainPhoto = member.Photos.SingleOrDefault(p => p.IsMain);

        var mainPhotoUrl = new StringBuilder(mainPhoto?.Url ?? "blank_");
        mainPhotoUrl = mainPhotoUrl.Replace("upload/", "upload/h_500,w_420,c_fill/");

        <div>
            <div class="col-lg-1 card-div member-card @(GetCurrentIndex(member) == 1 ? "innactive-card-first" : "") @(GetCurrentIndex(member) == 2 ? "innactive-card-second" : "")" style="background-image: url(@mainPhotoUrl)">
                <div class="row member-photo">
                    <div class="row member-det-act-container">
                        <div class="row member-details">
                            <div class="row member-name">
                                <h2>@member.FirstName&nbsp;@member.LastName</h2>
                            </div>

                            <div class="row member-age">
                                <h4>@member.Age&nbsp;y.&nbsp;o.</h4>
                            </div>

                            <div class="row member-interests">
                                <p class="interests-text">@member.Interests</p>
                            </div>
                        </div>

                        @if (showUserSpinner)
                        {
                            <i class="fa-solid fa-xl fa-spinner fa-spin-pulse fa-spin-reverse user-spinner"></i>
                        }

                        <div class="member-actions">
                            <i id='@($"user-like-{member.Id}")' class="far fa-heart fa-2x action-success-icon @(GetCurrentIndex(member) > 0 ? "hidden-member-actions" : "")" @onmouseenter='() => OnActionHover($"user-like-{member.Id}")' @onmouseleave='() => OnActionHover($"user-like-{member.Id}")' @onclick="() => OnLikeClick(member)" title="Like"></i>
                            <i id='@($"user-dislike-{member.Id}")' class="fas fa-heart-broken fa-2x action-danger-icon @(GetCurrentIndex(member) > 0 ? "hidden-member-actions" : "")" @onmouseenter='() => OnActionHover($"user-dislike-{member.Id}")' @onmouseleave='() => OnActionHover($"user-dislike-{member.Id}")' @onclick="() => OnDislikeClick(member)" title="Dislike"></i>
                            
                            <BSButton DataId="Details" Target="MemberDetailsModal" style="padding: 0; border: 0; color: #ffffff;"><i id='@($"user-info-{member.Id}")' class="fa-solid fa-2x fa-arrow-up-right-from-square action-icon @(GetCurrentIndex(member) > 0 ? "hidden-member-actions" : "")" @onmouseenter='() => OnActionHover($"user-info-{member.Id}")' @onmouseleave='() => OnActionHover($"user-info-{member.Id}")' @onclick="() => OnMoreInfoClick(member)" title="User Info"></i></BSButton>

                            <i id='@($"user-chat-{member.Id}")' class="far fa-paper-plane fa-2x action-info-icon @(GetCurrentIndex(member) > 0 ? "hidden-member-actions" : "")" @onmouseenter='() => OnActionHover($"user-chat-{member.Id}")' @onmouseleave='() => OnActionHover($"user-chat-{member.Id}")' @onclick="() => OnChatClick()" title="Start Chatting"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @*No suggested members*@
    @if (!showMainSpinner && Members.Count == 0)
    {
        <div class="col-lg-1 card-div member-card">
            <div class="row no-members-img-container">
                <i class="fa-solid fa-ban fa-10x no-member-image"></i>
            </div>

            <div class="row no-members-msg-container">
                <h4>Sorry, currently there are no matches for you <i class="fa-regular fa-face-frown-open"></i></h4>
                <p>Try to come back later!</p>
            </div>
        </div>
    }
</div>

@*Member details modal*@
<MemberDetails Id="MemberDetailsModal" ObservedMember="SelectedMember" OnActionHover="OnActionHover" OnLikeClick="OnLikeClick" OnDislikeClick="OnDislikeClick" OnChatClick="OnChatClick"></MemberDetails>

@code {
    private int skip = 0;
    private int take = 10;

    public List<Member> Members { get; private set; } = new List<Member>();
    public bool showMainSpinner { get; set; }
    public bool showUserSpinner { get; set; }
    public Member SelectedMember { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        showMainSpinner = true;

        var result  = await gtwAdapter.GetAllMembersAsync(skip, take);
        Members = result.ToList();

        showMainSpinner = false;
    }

    public async Task OnLikeClick(Member member)
    {
        showUserSpinner = true;

        var likedUserId = await gtwAdapter.LikeUserAsync(member.Id);

        showUserSpinner = false;

        if (likedUserId > 0)
        {
            Members = Members.Where(m => m.Id != member.Id).ToList();
        }

        if (Members.Count == 1)
        {
            await GetNextSuggestedMembers();
        }
    }

    public async Task OnDislikeClick(Member member)
    {
        showUserSpinner = true;

        await gtwAdapter.DislikeUserAsync(member.Id);

        showUserSpinner = false;

        // Drop member from the list at any case,
        // since user do not want to see them
        Members = Members.Where(m => m.Id != member.Id).ToList();

        if (Members.Count == 1)
        {
            await GetNextSuggestedMembers();
        }
    }

    public void OnChatClick()
    {
        // TODO: Redirect to the chat page
    }

    public void OnMoreInfoClick(Member member)
    {
        SelectedMember = member;
    }

    public int GetCurrentIndex(Member member)
    {
        return Members.IndexOf(member);
    }

    public async Task OnActionHover(string elementId)
    {
        await _jsRuntime.InvokeVoidAsync("Animation.SetAnimation", elementId);
    }

    private async Task GetNextSuggestedMembers()
    {
        skip = take;
        take += take;

        showMainSpinner = true;

        var result  = await gtwAdapter.GetAllMembersAsync(skip, take);
        Members.AddRange(result.ToList());

        showMainSpinner = false;
    }
}

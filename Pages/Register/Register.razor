@page "/Register"

@using DatingApp.FrontEnd.Gateway.DotNetGateway
@using DatingApp.FrontEnd.Models
@using System.Net.Http.Headers

@inject GatewayAdapter gtwAddapter;
@inject NavigationManager NavigationManager;
@inject IBlazorStrap _blazorStrap;

<div class="row register-content">
    <div class="col-lg-1 register-main-diff">
        <div class="row title-div">
            <h3>New Account</h3>
        </div>
        <div class="row title-div">
            <p>Fill in all required fields to register your account</p>
        </div>

        <BSProgress>
            <BSProgressBar Color="BSColor.Success" Value="@(currentStep * 33.3)"></BSProgressBar>
        </BSProgress>

        <EditForm class="row" Model="@account" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <BSCol Position="Position.Relative" ColumnMedium="12">
                <BSValidationSummary />

                @if (showCustomError)
                {
                    <ul class="validation-errors">
                        <li class="validation-message">@customErrorMessage</li>
                    </ul>
                }
            </BSCol>

            @*Spinner*@
            @if (isRegistrationProcessing)
            {
                <div class="spinner-div">
                    <BSSpinner id="spinner" Class="spinner" Color="BSColor.Warning" Size="Size.ExtraLarge" />
                </div>
            }

            @if (currentStep == 1)
            {
                <div class="row form-control-row">
                    <BSInput placeholder="First Name" @bind-Value="account.FirstName" />
                </div>
                <div class="row form-control-row">
                    <BSInput placeholder="Last Name" @bind-Value="account.LastName" />
                </div>
                <div class="row form-control-row">
                    <BSInput InputType="InputType.Email" placeholder="Email" @bind-Value="account.Email" />
                </div>

                <div class="row form-control-row">
                    <BSInput InputType="InputType.Select" @bind-Value="account.Gender">
                        @foreach (var gender in Enum.GetValues(typeof(Gender)))
                        {
                        <option value="@gender">
                            <DisplayName TItem="Gender" ForEnum="@gender"></DisplayName>
                        </option>
                        }
                    </BSInput>
                </div>

                <div class="row form-control-row">
                    <BSInput InputType="InputType.Date" @bind-Value="account.DateOfBirth" />
                </div>

                <div class="row form-control-row">
                    <BSInput InputType="InputType.Password" placeholder="Password" @bind-Value="account.Password" />
                </div>

                <div class="row form-control-row">
                    <BSInput InputType="InputType.Password" placeholder="Repeat Password" @bind-Value="account.RepeatPassword" />
                </div>
            }
            else if(currentStep == 2)
            {
                <div class="row form-control-row">
                    <BSInput InputType="InputType.Text" placeholder="Country" @bind-Value="account.Country" />
                </div>

                <div class="row form-control-row">
                    <BSInput InputType="InputType.Text" placeholder="City" @bind-Value="account.City" />
                </div>

                <div class="row form-control-row">
                    <BSInput InputType="InputType.TextArea" placeholder="About me" @bind-Value="account.Interests" />
                </div>
            }
            else
            {
                <div class="row form-control-row">
                    <BSInputFile IsRequired="true" ValidWhen="@(() => account.HasMainPhoto)" accept=".png,.jpeg,.jpg" OnChange="OnFileChange" />
                </div>
            }

            <div class="@(currentStep > 1 ? "register-btn-grp" : "")">
                @if (currentStep > 1)
                {
                    <div class="row form-control-row back-btn">
                        <a class="btn-link" @onclick="OnBackClick">&#8592;Back</a>
                    </div>
                }

                <div class="form-control-row @(currentStep == 1 ? "row" : "col")">
                    <BSButton type="submit" id="register-btn"  Color="BSColor.Success" Class="register-btn" disabled="@(isRegistrationProcessing)">@(currentStep < maxStepsAmount ? "Next" : "Register")</BSButton>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@*Warning toaster*@
<BSToaster/>

@code {
    private const long maxFileSize = 1024 * 1024 * 15;

    RegisterUser account = new ();
    int currentStep = 1;
    bool isRegistrationProcessing;
    const int maxStepsAmount = 3;
    bool showCustomError;
    string customErrorMessage;

    void OnBackClick()
    {
        showCustomError = false;
        --currentStep;
    }

    async Task HandleValidSubmit()
    {
        if (currentStep == maxStepsAmount)
        {
            if (!account.HasMainPhoto) // little hack to not implement a full wizard with steps
            {
                showCustomError = true;
                customErrorMessage = "Please select your avatar";
                return;
            }

            showCustomError = false;
            isRegistrationProcessing = true;
            var response = await gtwAddapter.RegisterAsync(account);
            // TODO: Add API call to upload main photo
            isRegistrationProcessing = false;

            if (response != null)
            {
                NavigationManager.NavigateTo("Login/true");
            }
            else
            {
                var warningMessage = "Something went wrong during registration";
                ShowToaster(warningMessage);
            }

            return;
        }

        ++currentStep;
    }

    void OnFileChange(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            var browserImage = e.File;

            try
            {
                using var stream = browserImage.OpenReadStream(5000000); // max file size - 5 MB
                account.MainPhoto = new FormFile(stream, stream.Position, stream.Length, "\"photos\"", browserImage.Name);
            }
            catch (IOException)
            {
                ShowToaster("Photo size shouldn't be more than 5MB");
            }
        }
    }

    private void ShowToaster(string message, int timer = 5000)
    {
        _blazorStrap.Toaster.Add(message, o =>
        {
            o.CloseAfter = timer;
            o.Toast = Toast.TopLeft;
            o.Color = BSColor.Warning;
        });
    }
}
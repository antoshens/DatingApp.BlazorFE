@using DatingApp.FrontEnd.Infrastructure
@using DatingApp.FrontEnd.Models.CurrentUser;

@inject NavigationManager _navigationManager;
@inject IAuthenticationStateHandler _authStateHandler;
@inject ICurrentUser _currentUser;
@inject IHostEnvironmentAuthenticationStateProvider _hostAuthentication;

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <FocusOnNavigate RouteData="@routeData" Selector="h1" />
                </Authorizing>

                <NotAuthorized>
                    @{
                        OnNotAuthorizedRedirect();
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>

        <NotFound>
            <PageTitle>Oupss... Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <div class="not-found-container row">
                    <div class="row not-found-message">
                        <h1>The page that you're looking for, can't be found</h1>
                    </div>

                    <div class="row not-found-button-container">
                        <button type="button" class="btn not-found-button" onclick="@OnGoHomeClick">Bring me back Home</button>
                    </div>
                </div>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    public bool IsAuthorized { get; set; }
    public bool IsFirstRender { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await _authStateHandler.UpdateState();

        IsFirstRender = false;

        _navigationManager.LocationChanged += async (object sender, LocationChangedEventArgs e) =>
        {
            if (sender is null)
            {
                throw new ArgumentNullException(nameof(sender));
            }

            if (e is null)
            {
                throw new ArgumentNullException(nameof(e));
            }

            
            IsAuthorized = await _currentUser.IsLoggedInAsync();
            if (IsAuthorized && (e.Location == _navigationManager.BaseUri || e.Location.Contains("Login") || e.Location.Contains("Register")))
            {
                _navigationManager.NavigateTo("Dashboard");
            }
        };
    }

    public void OnNotAuthorizedRedirect()
    {
        var location = _navigationManager.Uri;

        if (!IsFirstRender && !IsAuthorized && !location.Contains("Register"))
        {
            _navigationManager.NavigateTo("Login");
        }
    }

    void OnGoHomeClick()
    {
        _navigationManager.NavigateTo("Dashboard");
    }
}
